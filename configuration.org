#+STARTUP: overview

* Configuration

** flakes

このdotfilesではflakeを
Nixのツールの依存管理、
マシンの環境の定義
などに利用している。

*** flake inputs

**** nixpkgs

The primary Nix package collection. Using =nixos-unstable-small= as the base channel for faster updates with smaller package sets, and =nixos-24.05= as a stable auxiliary channel for packages requiring stability.

#+begin_src nix
    nixpkgs.url = "git+https://github.com/nixos/nixpkgs?shallow=1&ref=nixos-unstable-small";
    nixpkgs-stable.url = "git+https://github.com/nixos/nixpkgs?shallow=1&ref=nixos-24.05";
#+end_src

Using =git+https://github.com/nixos/nixpkgs= instead of the common =github:nixos/nixpkgs= notation reduces download size and execution time by performing shallow clones.

Note: Renovate's lockfile maintenance requires the =github:nixos/nixpkgs= string pattern to function, necessitating this workaround:

#+begin_src nix
    # see https://github.com/renovatebot/renovate/issues/29721
    # "github:NixOS/nixpkgs/trick-renovate-into-working"
#+end_src

**** brew-api

Homebrew API data for brew-nix integration. Provides package metadata without requiring a full Homebrew installation.

#+begin_src nix
    brew-api.flake = false;
    brew-api.url = "github:BatteredBunny/brew-api";
#+end_src

**** brew-nix

Enables using Homebrew packages through Nix on macOS, providing access to packages not available in nixpkgs.

#+begin_src nix
    brew-nix.url = "github:BatteredBunny/brew-nix";
#+end_src

**** claude-desktop

Claude Desktop application packaged for Linux systems.

#+begin_src nix
    claude-desktop.url = "github:k3d3/claude-desktop-linux-flake";
#+end_src

**** comin

Git-based continuous deployment tool for NixOS configurations. Automatically applies configuration changes from a Git repository.

#+begin_src nix
    comin.url = "github:nlewo/comin";
#+end_src

**** darwin

Nix modules for managing macOS system configuration declaratively, similar to NixOS but for Darwin systems.

#+begin_src nix
    darwin.url = "github:nix-darwin/nix-darwin";
#+end_src

**** disko

Declarative disk partitioning and formatting tool for NixOS installations.

#+begin_src nix
    disko.url = "github:nix-community/disko";
#+end_src

**** emacs-overlay

Daily builds of Emacs packages and development versions, providing the latest Emacs features and packages.

#+begin_src nix
    emacs-overlay.url = "github:nix-community/emacs-overlay";
#+end_src

**** firefox-addons

Firefox extensions packaged as Nix derivations, allowing declarative management of browser extensions.

#+begin_src nix
    firefox-addons.url = "gitlab:rycee/nur-expressions?dir=pkgs/firefox-addons";
#+end_src

**** flake-parts

Modular flake framework that simplifies writing and organizing complex Nix flakes.

#+begin_src nix
    flake-parts.url = "github:hercules-ci/flake-parts";
#+end_src

**** flake-utils

Utility functions for working with Nix flakes, simplifying common patterns.

#+begin_src nix
    flake-utils.url = "github:numtide/flake-utils";
#+end_src

**** git-hooks

Pre-commit hooks framework for Nix projects, ensuring code quality and consistency.

#+begin_src nix
    git-hooks.url = "github:cachix/git-hooks.nix";
#+end_src

**** home-manager

Manages user environments declaratively using Nix, handling dotfiles, packages, and services on a per-user basis.

#+begin_src nix
    home-manager.url = "github:nix-community/home-manager";
#+end_src

**** impermanence

Enables ephemeral root filesystems by persisting only selected directories and files across reboots.

#+begin_src nix
    impermanence.url = "github:nix-community/impermanence";
#+end_src

**** lanzaboote

Secure Boot support for NixOS using systemd-boot and TPM measurements.

#+begin_src nix
    lanzaboote.url = "github:nix-community/lanzaboote";
#+end_src

**** mcp-servers

Model Context Protocol (MCP) servers packaged for Nix, enabling AI assistants to interact with various tools and services.

#+begin_src nix
    mcp-servers.url = "github:natsukium/mcp-servers-nix";
#+end_src

**** niri-flake

Niri scrollable-tiling Wayland compositor packaged for NixOS, providing a modern window management experience.

#+begin_src nix
    niri-flake.url = "github:sodiboo/niri-flake";
#+end_src

**** nix-colors

Base16 color scheme management for Nix configurations, enabling consistent theming across applications.

#+begin_src nix
    nix-colors.url = "github:misterio77/nix-colors";
#+end_src

**** nix-on-droid

Nix package manager for Android devices, running on top of Termux to provide a Nix environment on mobile.

#+begin_src nix
    nix-on-droid.url = "github:nix-community/nix-on-droid";
#+end_src

**** nix-wallpaper

Generates custom wallpapers with Nix logos and branding for desktop environments.

#+begin_src nix
    nix-wallpaper.url = "github:natsukium/nix-wallpaper/custom-logo";
#+end_src

**** nixos-facter-modules

Hardware detection and system information modules for NixOS configurations.

#+begin_src nix
    nixos-facter-modules.url = "github:numtide/nixos-facter-modules";
#+end_src

**** nixos-wsl

NixOS modules for Windows Subsystem for Linux, enabling NixOS to run seamlessly in WSL2 environments.

#+begin_src nix
    nixos-wsl.url = "github:nix-community/nixos-wsl";
#+end_src

**** nur-packages

Personal Nix User Repository containing custom packages and overlays.

#+begin_src nix
    nur-packages.url = "github:natsukium/nur-packages";
#+end_src

**** sops-nix

Secrets management for NixOS using SOPS (Secrets OPerationS), enabling encrypted storage of sensitive configuration.

#+begin_src nix
    sops-nix.url = "github:Mic92/sops-nix";
#+end_src

**** treefmt-nix

Universal code formatter configuration for Nix projects, ensuring consistent formatting across multiple languages.

#+begin_src nix
    treefmt-nix.url = "github:numtide/treefmt-nix";
#+end_src

**** tsnsrv

Tailscale SSH server for NixOS, simplifying secure remote access through Tailscale's network.

#+begin_src nix
    tsnsrv.url = "github:boinkor-net/tsnsrv";
#+end_src

**** zen-browser

Zen Browser packaged for Nix, a Firefox-based browser focused on privacy and customization.

#+begin_src nix
    zen-browser.url = "github:0xc000022070/zen-browser-flake";
#+end_src

** Emacs
*** early-init.org
#+INCLUDE: "./applications/emacs/early-init.org"
*** init.org
#+INCLUDE: "./applications/emacs/init.org"
